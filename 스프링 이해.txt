구조
	domain		정보를 임시적으로 가진 놈들
		getter, setter로 주고 받는다.
		
	controller	웹과 소통하는 부분
		JSON방식으로 소통
		Get, Post, Delete, Patch같은 어노테이션으로 소통
		xml로 화면 구성

	service		실질적인 서비스 구현하는 부분
	

	repository	DB와 연결되어 데이터를 저장하는 부분
	

	DB		데이터를 실질적으로 저장
		인터페이스를 사용해서 DB선정 전 작업 or 교체를 용이하게 함
		스프링 데이터 JPA를 사용해서 쉽게 구성가능 (아직 공부 안했음)
		빈을 직접등록해서 구현체를 

스프링 기능
	DI		동일한 객체를 사용하기 위해서 사용
		생성자 방식사용
		@Autowired를 가진 곳에 @Component를 사용하는 객체를 자동으로 적용
		
		※ @Configuration를 사용한 클래스에 @Bean을 직접 등록해서 사용가능

	AOP		공통된 로직과 핵심로직을 분리하여 관리를 편하게 함
		

공부할 것들
	1. MVC (Model View Controller)
	2. AOP
	3. 전체적인 로직 구성
	4. 테스트 코드 잘 짜는 법
	5. JPA
	6. 스프링 데이터 JPA
	7. 프로그래밍 습관
	8. 예시 제작
		


